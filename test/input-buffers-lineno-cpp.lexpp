/* input-buffers-lineno-cpp.lexpp */
/* Multiple input buffers, %option yylineno, %option c++. */

%smflex 100
%option yylineno
%option c++

/* The "incl" state is used for picking up the name of an include file. */
%x incl

%{
#include <assert.h>          /* assert */
#include <stdio.h>           /* fprintf, fopen, etc. */
#include <stdlib.h>          /* exit */
#include <string.h>          /* strlen, strcpy */

#include <fstream>           /* ifstream */

using namespace std;

/* Stack of in-flight buffers. */
#define MAX_INCLUDE_DEPTH 10
yy_buffer_state_t *include_stack[MAX_INCLUDE_DEPTH];
char *fname_stack[MAX_INCLUDE_DEPTH];
int lineno_stack[MAX_INCLUDE_DEPTH];
int include_stack_len = 0;

/* Name of current input file, malloc'd. */
char *current_fname = NULL;

/* List of files to process at top level. */
char const *file_list[3] =
  { "input-buffers.input2", "input-buffers.input3", "input-buffers.input4" };
int file_list_index = 0;

static char *my_strdup(char const *src)
{
  char *ret = (char*)malloc(strlen(src)+1);
  strcpy(ret, src);
  return ret;
}
%}

%%
include[ ]+         yym_set_start_condition(incl);

getloc              printf("[getloc: %s:%d]", current_fname, yym_lineno());

[a-z]+              YY_ECHO;
[^a-z\n]*\n?        YY_ECHO;

<incl>[^\n]+      { /* got the include file name */
          yy_buffer_state_t *newbuf;

          ifstream *fp = new ifstream(yym_text(), ios::binary);
          if (!*fp) {
            fprintf(stderr, "Cannot open include file: \"%s\".\n", yym_text());
            exit(2);
          }

          /* Save current info. */
          if (include_stack_len >= MAX_INCLUDE_DEPTH) {
            fprintf(stderr, "Includes nested too deeply.\n");
            exit(2);
          }
          include_stack[include_stack_len] = yym_current_buffer();
          fname_stack[include_stack_len] = current_fname;
          lineno_stack[include_stack_len] = yym_lineno();
          include_stack_len++;

          /* Set new 'current' data.  This has to be done before calling
           * 'yy_switch_to_buffer' because that destroys 'yym_text()'. */
          current_fname = my_strdup(yym_text());
          yym_set_lineno(1);

          /* Set up new buffer. */
          newbuf = yym_create_buffer(fp, 0 /*size*/);
          yym_switch_to_buffer(newbuf);

          /* Start condition for processing the new file. */
          yym_set_start_condition(INITIAL);
        }

<<EOF>> {
          /* Finished with this file; close it. */
          if (yym_input_stream() != &cin) {
            delete yym_input_stream();
          }
          free(current_fname);

          if (include_stack_len >= 1) {
            /* The current buffer is one we made, so clean it up. */
            yym_delete_buffer(yym_current_buffer());

            /* Return to the buffer on the top of the stack.  Note
             * that this sets 'yym_input_stream()'. */
            include_stack_len--;
            yym_switch_to_buffer(include_stack[include_stack_len]);
            current_fname = fname_stack[include_stack_len];
            yym_set_lineno(lineno_stack[include_stack_len]);
          }

          else if (file_list_index < 3) {
            /* Open the next top-level file. */
            char const *fname = file_list[file_list_index++];
            ifstream *fp = new ifstream(fname, ios::binary);
            if (!*fp) {
              fprintf(stderr, "Cannot open top-level file: \"%s\".\n", fname);
              exit(2);
            }

            /* Update current file info. */
            current_fname = my_strdup(fname);
            yym_set_lineno(1);

            /* Begin scanning it, continuing to use the current buffer. */
            yym_restart(fp);
          }

          else {
            /* All done. */
            YY_TERMINATE();
          }
        }

%%

int main()
{
  {
    yyFlexLexer lexer;

    current_fname = my_strdup("<stdin>");

    while (lexer.yym_lex())
      {}

    /* 'current_fname' was freed in the <<EOF>> action, above. */
  }

  yyFlexLexer::yym_check_for_memory_leaks();
  return 0;
}
