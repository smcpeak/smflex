# Makefile.in

@SET_MAKE@

# Possible values for DEFS:
#
# By default, flex generates 8-bit scanners when using table compression,
# and 7-bit scanners when using uncompressed tables (-f or -F options).
# For flex to always generate 8-bit scanners, add "-DDEFAULT_CSIZE=256"
# to DEFS.
#
# For Vax/VMS, add "-DVMS" to DEFS.
#
# For MS-DOS, add "-DMS_DOS" to DEFS.  See the directory MISC/MSDOS for
# additional info.

CFLAGS = @CFLAGS@
CPPFLAGS = @CPPFLAGS@
DEFS = @DEFS@
LDFLAGS = 
LIBS = @LIBS@

# Enable all GCC warnings.
CFLAGS += -Wall

# Installation targeting.  Files will be installed under the tree
# rooted at prefix.  flex will be installed in bindir, libfl.a in
# libdir, and FlexLexer.h will be installed in includedir.

prefix = @prefix@
exec_prefix = @exec_prefix@
bindir = $(exec_prefix)/bin
libdir = $(exec_prefix)/lib
includedir = $(prefix)/include

# You can define these to be "lex" and "libl.a" if you want to replace
# lex at your site.
FLEX = flex
FLEXLIB = libfl.a

SHELL = /bin/sh
srcdir = @srcdir@
VPATH = @srcdir@

LN_S = @LN_S@
YACC = @YACC@
CC = @CC@
AR = ar
RANLIB = @RANLIB@
INSTALL = @INSTALL@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_PROGRAM = @INSTALL_PROGRAM@

# You normally do not need to modify anything below this point.
# ------------------------------------------------------------

# Preprocessor flags.
CPPFLAGS = -I. -I$(srcdir)

# Rule for compiling one C source file.
.c.o:
	$(CC) -c $(CPPFLAGS) $(CFLAGS) $<

# Headers to include in the distribution, minus FlexLexer.h for some
# reason.
HEADERS = flexdef.h version.h

# Sources to include in the distribution, and also on which to run tags.
SOURCES = ccl.c dfa.c ecs.c gen.c main.c misc.c nfa.c parse.y \
	scan.l skel.c sym.c tblcmp.c yylex.c

# Object files to compile and link into 'flex'.
OBJECTS = ccl.o dfa.o ecs.o gen.o main.o misc.o nfa.o parse.o \
	scan.o skel.o sym.o tblcmp.o yylex.o

# Runtime library sources, also included in the distribution.
LIBSRCS = libmain.c libyywrap.c

# Object files to compile and archive into $(FLEXLIB).
LIBOBJS = libmain.o libyywrap.o

# Complete set of files to be included in the distribution tarball,
# except that 'scan.c' gets renamed to 'initscan.c' during the packaging
# process.
DISTFILES = README.md NEWS COPYING FlexLexer.h \
	configure.in conf.in Makefile.in mkskel.sh flex.skl \
	$(HEADERS) $(SOURCES) $(LIBSRCS) \
	flex.md scan.c install.sh mkinstalldirs configure

# Name of the distribution, meaning what goes before ".tar.gz" in the
# distribution tarball file name, and also the name of the directory
# that tarball expands to.  The value here is not normally used.
# Instead, the 'dist' target sets it when invoking 'dist2'.
DIST_NAME = flex

# Which "flex" to use to generate scan.c from scan.l.  This could be
# useful to set if, while developing, the current 'flex' is broken.
FLEX_EXEC = ./$(FLEX)

# Flags to pass to $(FLEX_EXEC).
PERF_REPORT = -p
FLEX_FLAGS = -t $(PERF_REPORT)

# Default compression to use when generating scan.c.  This is overridden
# by the 'bigcheck' target.  Empty means none.
COMPRESSION =


# Default target.
all: $(FLEX)

# Link the final flex executable.
$(FLEX): .bootstrap $(OBJECTS) $(FLEXLIB)
	$(CC) $(CFLAGS) -o $(FLEX) $(LDFLAGS) $(OBJECTS) $(FLEXLIB) $(LIBS)

# This creates the initial scan.c from initscan.c.  The latter is
# checked in to the repo so one does not need to have flex already
# in order to build it.  But once the bootstrap is done, indicated
# by the presence of the .bootstrap file, we let scan.c continue to
# evolve as flex itself changes.
.bootstrap: initscan.c
	rm -f scan.c
	cp $(srcdir)/initscan.c scan.c
	touch .bootstrap

# Bison-generated parser for flex's input language.
parse.c: parse.y
	$(YACC) -d $(srcdir)/parse.y
	mv -f y.tab.c parse.c
	mv -f y.tab.h parse.h

# This rule tells 'make' that in order to create 'parse.h' it must first
# create 'parse.c'.  The latter is what actually makes 'parse.h'.
parse.h: parse.c

# scan.c is the output of running flex on 'scan.l'.  It is used by
# flex to read it input file.  Hence, flex is partially written in
# its own language.  See the .bootstrap target.
scan.c: scan.l
	$(FLEX_EXEC) $(FLEX_FLAGS) $(COMPRESSION) $(srcdir)/scan.l >scan.c
	sed s,\"$(srcdir)/scan.l\",\"scan.l\", <scan.c >scan.tmp
	mv scan.tmp scan.c

# 'skel.c' contains the contents of 'flex.skl' as a C string.
skel.c: flex.skl mkskel.sh
	$(SHELL) $(srcdir)/mkskel.sh $(srcdir)/flex.skl skel.c skel

# Compile-time dependencies.
scan.o: scan.c parse.h flexdef.h config.h
yylex.o: yylex.c parse.h flexdef.h config.h
main.o: main.c flexdef.h config.h version.h
ccl.o: ccl.c flexdef.h config.h
dfa.o: dfa.c flexdef.h config.h
ecs.o: ecs.c flexdef.h config.h
gen.o: gen.c flexdef.h config.h
misc.o: misc.c flexdef.h config.h
nfa.o: nfa.c flexdef.h config.h
parse.o: parse.c flexdef.h config.h
skel.o: skel.c flexdef.h config.h
sym.o: sym.c flexdef.h config.h
tblcmp.o: tblcmp.c flexdef.h config.h

# Run a quick check to see if the current flex produces the same
# output as it did before.
test: check
check: $(FLEX)
	$(FLEX_EXEC) $(FLEX_FLAGS) $(COMPRESSION) $(srcdir)/scan.l \
	  | sed s,\"$(srcdir)/scan.l\",\"scan.l\", > scan.actual.c
	diff -b scan.c scan.actual.c
	rm scan.actual.c
	@echo "Check successful, using COMPRESSION=\"$(COMPRESSION)\""

# With various compression modes:
#
#   1. Regenerate scan.c with that compression mode.
#   2. Recompile flex with the new scan.c.
#   3. Run the new flex to make scan.c again, with the same compression
#      mode.
#   4. Check that the second output agrees with the first.
#
# Thus, we are checking at each stage that the existing flex (with
# whatever previous compression mode was active) and the new flex have
# the same output.
#
bigcheck:
	rm -f scan.c ; $(MAKE) COMPRESSION="-C" check
	rm -f scan.c ; $(MAKE) COMPRESSION="-Ce" check
	rm -f scan.c ; $(MAKE) COMPRESSION="-Cm" check
	rm -f scan.c ; $(MAKE) COMPRESSION="-f" check
	rm -f scan.c ; $(MAKE) COMPRESSION="-Cfea" check
	rm -f scan.c ; $(MAKE) COMPRESSION="-CFer" check
	rm -f scan.c ; $(MAKE) COMPRESSION="-l" PERF_REPORT="" check
	rm -f scan.c ; $(MAKE)
	@echo "All checks successful"

# Create flex runtime library.
$(FLEXLIB): $(LIBOBJS)
	$(AR) cru $(FLEXLIB) $(LIBOBJS)
	-$(RANLIB) $(FLEXLIB)

# Install to the chosen --prefix.
install: $(FLEX) $(FLEXLIB) installdirs
	$(INSTALL_PROGRAM) $(FLEX) $(bindir)/$(FLEX)
	@rm -f $(bindir)/$(FLEX)++
	cd $(bindir) && $(LN_S) $(FLEX) $(FLEX)++
	$(INSTALL_DATA) $(FLEXLIB) $(libdir)/$(FLEXLIB)
	-cd $(libdir) && $(RANLIB) $(FLEXLIB)
	$(INSTALL_DATA) $(srcdir)/FlexLexer.h $(includedir)/FlexLexer.h

installdirs:
	$(SHELL) $(srcdir)/mkinstalldirs \
	  $(bindir) $(libdir) $(includedir)

uninstall:
	rm -f $(bindir)/$(FLEX) $(bindir)/$(FLEX)++
	rm -f $(libdir)/$(FLEXLIB)
	rm -f $(includedir)/FlexLexer.h

tags: $(SOURCES)
	ctags $(SOURCES)

TAGS: $(SOURCES)
	etags $(SOURCES)

mostlyclean:
	rm -f a.out *.bak core errs scan.tmp

clean: mostlyclean
	rm -f flex parse.c parse.h *.o lex.yy.c lex.yy.cc \
		$(FLEXLIB) config.log config.cache

distclean: clean
	rm -f .bootstrap $(FLEX) scan.c tags TAGS Makefile config.status \
		config.h stamp-h config.log config.cache

maintainer-clean: distclean
	@echo "This command is intended for maintainers to use;"
	@echo "it deletes files that may require special tools to rebuild."
	rm -f skel.c flex*.tar.gz flex*.tar.Z

# Create a source tarball for distribution.
dist: $(FLEX) $(DISTFILES) parse.c parse.h
	$(MAKE) DIST_NAME=flex-`sed <version.h 's/[^"]*"//' | sed 's/"//'` dist2

dist2:
	rm -rf $(DIST_NAME)
	rm -f $(DIST_NAME).tar $(DIST_NAME).tar.gz
	mkdir $(DIST_NAME)
	tar cf - $(DISTFILES) | (cd $(DIST_NAME) && tar xfB -)
	mv $(DIST_NAME)/scan.c $(DIST_NAME)/initscan.c
	chmod 444 $(DIST_NAME)/initscan.c
	chmod +w $(DIST_NAME)/Makefile.in
	tar chf $(DIST_NAME).tar $(DIST_NAME)
	gzip <$(DIST_NAME).tar >$(DIST_NAME).tar.gz
	rm $(DIST_NAME).tar

# For an explanation of the following Makefile rules, see node
# `Automatic Remaking' in GNU Autoconf documentation.
Makefile: $(srcdir)/Makefile.in config.status
	CONFIG_FILES=$@ CONFIG_HEADERS= ./config.status
config.status: configure
	./config.status --recheck
configure: configure.in
	cd $(srcdir) && autoconf
config.h: stamp-h
stamp-h: conf.in config.status
	CONFIG_FILES= CONFIG_HEADERS=config.h:conf.in ./config.status
	echo timestamp >stamp-h
# conf.in: stamp-h.in
# stamp-h.in: configure.in acconfig.h
# 	cd $(srcdir) && autoheader
# 	config.h.in conf.in
# 	cho timestamp > $(srcdir)/stamp-h.in

# Tell versions [3.59,3.63) of GNU make not to export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
