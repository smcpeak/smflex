%# generated-scanner.skl: Skeleton of generated scanner.
%#
%# NOTE: There are three modes the skeleton file supports:
%#
%#   1. C interface scanner, compiled with a C compiler.
%#
%#   2. C interface scanner, compiled with a C++ compiler.
%#
%#   3. C++ interface scanner, compiled with a C++ compiler.
%#
%# The choice of scanner interface is controlled by "%option c++",
%# which in the skeleton affects whether "%if cpp_interface" is emitted.
%#
%# The choice of compiler determines whether __cplusplus is defined
%# while the scanner output is being compiled, but is not known to
%# smflex at generation time (except that if "%option c++" is used,
%# then we can assume a C++ compiler will be used).
/* yy_scanner_file_name */
/* A lexical scanner generated by smflex. */
/* DO NOT EDIT MANUALLY. */

#include "yy_header_file_name"     /* yy_lexer_t */

#include <stdlib.h>          /* malloc, free, realloc, exit */
#include <string.h>          /* strlen */
%if use_read
#include <unistd.h>          /* read, needed for -Cr option */
%endif


/* Defined within a generated scanner. */
#define SMFLEX_SCANNER

/* Version of smflex used to generate this scanner. */
#define YY_SMFLEX_MAJOR_VERSION 1
#define YY_SMFLEX_MINOR_VERSION 0


/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_lexer->yy_start_state = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state. */
#define YY_START ((yy_lexer->yy_start_state - 1) / 2)

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yy_restart(yy_lexer, yy_lexer->yy_input_stream)

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

/* Define a macro that, when enabled, causes certain printouts to go
 * to stdout.  The intent is to use this as part of tests in order to
 * be able to see what some of the internals are doing when there is
 * not a less intrusive method available.  The symbol
 * 'YY_ENABLE_DEBUG_LOG_CALL' must be passed as a -D argument on the
 * compiler command line to activate this. */
#ifdef YY_ENABLE_DEBUG_LOG_CALL
%if !cpp_interface
#  define YY_DEBUG_LOG_CALL(call, val) \
     printf("[%s: %d]\n", call, val)
%else
#  define YY_DEBUG_LOG_CALL(call, val) \
     (std::cout << '[' << (call) << ": " << (int)(val) << "]\n")
%endif
#else
#  define YY_DEBUG_LOG_CALL(str, val) ((void)0)
#endif

/* This macro is meant to be used for a label that the code generator
 * emits but is not sure will be used.  Its purpose is to suppress any
 * warnings about the label in case it is, in fact, unused. */
#ifndef YY_POSSIBLY_UNUSED_LABEL
#  ifdef __GNUC__
#    define YY_POSSIBLY_UNUSED_LABEL(label) \
       label: __attribute__((__unused__));
#  else
#    define YY_POSSIBLY_UNUSED_LABEL(label) label:
#  endif
#endif

/* This macro is placed in front of the declarations of functions that
 * may or may not be used, depending on what the user's actions do. */
#ifndef YY_POSSIBLY_UNUSED_FUNCTION
#  ifdef __GNUC__
#    define YY_POSSIBLY_UNUSED_FUNCTION __attribute__((__unused__))
#  else
#    define YY_POSSIBLY_UNUSED_FUNCTION /*nothing*/
#  endif
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* Return all but the first 'n' matched characters back to the input stream. */
#define yyless(n) \
  if (1) { \
    /* Undo effects of setting up yy_text. */ \
    *yy_cp = yy_lexer->yy_hold_char; \
    yy_lexer->yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
    YY_DO_BEFORE_ACTION; /* set up yy_text again */ \
  } else ((void)0)

/* This structure contains the buffer state for a particular input
 * source.  By buffering, it allows efficient access to the bytes in
 * that source one at a time; its principal operations are to get the
 * next character and to put a character back. */
struct yy_buffer_state_struct {
  YY_INPUT_STREAM_TYPE *yy_input_file;

  char *yy_ch_buf;                /* input buffer */
  char *yy_buf_pos;               /* current position in input buffer */

  /* Size of input buffer in bytes, not including room for EOB
   * characters.
   */
  size_t yy_buf_size;

  /* Number of characters read into yy_ch_buf, not including EOB
   * characters.
   */
  int yy_n_chars;

  /* Whether we "own" the buffer - i.e., we know we created it,
   * and can realloc() it to grow it, and should free() it to
   * delete it.
   */
  int yy_is_our_buffer;

  /* Whether this is an "interactive" input source; if so, and
   * if we're using stdio for input, then we want to use getc()
   * instead of fread(), to make sure we stop fetching input after
   * each newline.
   */
  int yy_is_interactive;

  /* Whether we're considered to be at the beginning of a line.
   * If so, '^' rules will be active on the next match, otherwise
   * not.
   */
  int yy_at_bol;

  /* Whether to try to fill the input buffer when we reach the
   * end of it.
   */
  int yy_fill_buffer;

  int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
  /* When an EOF's been seen but there's still some text to process
   * then we mark the buffer as YY_EOF_PENDING, to indicate that we
   * shouldn't try reading from the input source any more.  We might
   * still have a bunch of tokens to match, though, because of
   * possible backing-up.
   *
   * When we actually see the EOF, we change the status to "new"
   * (via yy_restart()), so that the user can continue scanning by
   * just pointing 'yy_input_stream' at a new input file.
   */
#define YY_BUFFER_EOF_PENDING 2
};

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER (yy_lexer->yy_current_buffer)


#define YY_FLUSH_BUFFER yy_flush_buffer(yy_lexer, yy_lexer->yy_current_buffer)

static void *yy_flex_alloc(size_t);

YY_POSSIBLY_UNUSED_FUNCTION
static void *yy_flex_realloc(void *, size_t);

static void yy_flex_free(void *);

static void yy_load_buffer_state(yy_lexer_t *yy_lexer);
static void yy_init_buffer(yy_lexer_t *yy_lexer, yy_buffer_state_t *b,
                           YY_INPUT_STREAM_TYPE *file);

/* If 'yy_lexer' does not have a current buffer, create one. */
static void yy_create_buffer_if_needed(yy_lexer_t *yy_lexer)
{
  if (!yy_lexer->yy_current_buffer) {
    yy_lexer->yy_current_buffer = yy_create_buffer(yy_lexer, yy_lexer->yy_input_stream, YY_BUF_SIZE);
  }
}


void yy_set_interactive(yy_lexer_t *yy_lexer, int is_interactive)
{
  yy_create_buffer_if_needed(yy_lexer);
  YY_DEBUG_LOG_CALL("setting yy_is_interactive due to yy_set_interactive", is_interactive);
  yy_lexer->yy_current_buffer->yy_is_interactive = is_interactive;
}

%if cpp_interface
void yyFlexLexer::yym_set_interactive(int is_interactive)
{
  yy_set_interactive(&yym_lexer_state, is_interactive);
}
%endif


void yy_set_bol(yy_lexer_t *yy_lexer, int at_bol)
{
  yy_create_buffer_if_needed(yy_lexer);
  yy_lexer->yy_current_buffer->yy_at_bol = at_bol;
}

%if cpp_interface
void yyFlexLexer::yym_set_bol(int at_bol)
{
  yy_set_bol(&yym_lexer_state, at_bol);
}
%endif


%if cpp_interface
static int yy_wrap_delegate(yy_lexer_t *yy_lexer)
{
  return yy_lexer->yy_wrapper_object->yym_wrap();
}

int yyFlexLexer::yym_wrap()
{
  return 1;    /* No more input. */
}
%endif # cpp_interface


#define YY_AT_BOL() (yy_lexer->yy_current_buffer->yy_at_bol)

%% yy_text_def: yy_text/yy_input_stream/yy_output_stream/yy_state_type_t/yy_lineno etc. def's & init go here

static yy_state_type_t yy_get_previous_state(yy_lexer_t *yy_lexer);
static yy_state_type_t yy_try_NUL_trans(yy_lexer_t *yy_lexer, yy_state_type_t current_state);
static int yy_get_next_buffer(yy_lexer_t *yy_lexer);
static void yy_fatal_error(yy_lexer_t *yy_lexer, char const *msg);

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yy_text.
 */
#define YY_DO_BEFORE_ACTION \
  yy_lexer->yy_text = yy_bp; \
%% yymore_yy_text: code to fiddle yy_text and yy_leng for yymore() goes here
  yy_lexer->yy_hold_char = *yy_cp; \
  *yy_cp = '\0'; \
  yy_lexer->yy_c_buf_p = yy_cp;

%% dfa_tables: data tables for the DFA and the user's section 1 definitions go here

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */


/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#  define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
%if !cpp_interface
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#  define ECHO (void) fwrite(yy_lexer->yy_text, yy_lexer->yy_leng, 1, yy_lexer->yy_output_stream)
%else C++ definition
#  define ECHO yym_LexerOutput(yy_lexer->yy_text, yy_lexer->yy_leng)
%endif
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
%if cpp_interface
#  define YY_INPUT(buf,result,max_size) \
    if ( (result = yy_lexer->yy_wrapper_object->yym_LexerInput((char*)buf, max_size)) < 0 ) { \
      YY_FATAL_ERROR("input in smflex scanner failed"); \
    }
%else
%if use_read
#  define YY_INPUT(buf,result,max_size) \
  if (1) { \
    result = read(fileno(yy_lexer->yy_input_stream), (char*)buf, max_size); \
    YY_DEBUG_LOG_CALL("read()", result); \
    if (result < 0) { \
      YY_FATAL_ERROR("input in smflex scanner failed"); \
    } \
  } else ((void)0)
%else
#  define YY_INPUT(buf,result,max_size) \
  if (yy_lexer->yy_current_buffer->yy_is_interactive) { \
    int c = '*', n; \
    for (n = 0; \
         n < max_size && (c = getc(yy_lexer->yy_input_stream)) != EOF && c != '\n'; \
         ++n) { \
      YY_DEBUG_LOG_CALL("getc()", c); \
      buf[n] = (char) c; \
    } \
    /* Either we hit 'size_max' or we read a special character. */ \
    if (c == '\n') { \
      YY_DEBUG_LOG_CALL("getc()", c); \
      buf[n++] = (char) c; \
    } \
    if (c == EOF) { \
      YY_DEBUG_LOG_CALL("getc()", c); \
      if (ferror(yy_lexer->yy_input_stream)) { \
        YY_FATAL_ERROR("input in smflex scanner failed"); \
      } \
    } \
    result = n; \
  } \
  else { \
    result = fread(buf, 1, max_size, yy_lexer->yy_input_stream); \
    YY_DEBUG_LOG_CALL("fread()", result); \
    if (result == 0 && ferror(yy_lexer->yy_input_stream)) { \
      YY_FATAL_ERROR("input in smflex scanner failed"); \
    } \
  }
%endif # use_read
%endif # cpp_interface
#endif /* YY_INPUT */

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#  define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#  define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#  define YY_FATAL_ERROR(msg) yy_fatal_error(yy_lexer, msg)
#endif

/* Code executed at the beginning of each rule, after yy_text and yy_leng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#  define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#  define YY_BREAK break;
#endif

%% YY_RULE_SETUP: YY_RULE_SETUP definition goes here

%if !cpp_interface
int yy_lex(yy_lexer_t * const yy_lexer)
%else
%if yyclass
int yyclass_name::yym_lex()
%else
int yyFlexLexer::yym_lex()
%endif
%endif
{
%if cpp_interface
  /* Define a local 'yy_lexer' that plays the same role as the parameter
   * 'yy_lexer' in the C interface.  By making this 'const' the compiler
   * will hopefully understand it is just an alias for a member. */
  yy_lexer_t * const yy_lexer = &(this->yym_lexer_state);
%endif

  yy_state_type_t yy_current_state;
  char *yy_cp, *yy_bp;
  int yy_act;

%% user_local_decl: user's declarations go here

  if (yy_lexer->yy_init) {
    yy_lexer->yy_init = 0;

#ifdef YY_USER_INIT
    YY_USER_INIT;
#endif

    if (!yy_lexer->yy_start_state)
      yy_lexer->yy_start_state = 1;   /* first start state */

    if (!yy_lexer->yy_input_stream)
%if !cpp_interface
      yy_lexer->yy_input_stream = stdin;
%else
      yy_lexer->yy_input_stream = &std::cin;
%endif

    if (!yy_lexer->yy_output_stream)
%if !cpp_interface
      yy_lexer->yy_output_stream = stdout;
%else
      yy_lexer->yy_output_stream = &std::cout;
%endif

    if (!yy_lexer->yy_current_buffer)
      yy_lexer->yy_current_buffer =
        yy_create_buffer(yy_lexer, yy_lexer->yy_input_stream, YY_BUF_SIZE);

    yy_load_buffer_state(yy_lexer);
  }

  while (1) {            /* loops until end-of-file is reached */
%% yymore_loop_top: yymore()-related code goes here
    yy_cp = yy_lexer->yy_c_buf_p;

    /* Support of yy_text. */
    *yy_cp = yy_lexer->yy_hold_char;

    /* yy_bp points to the position in yy_ch_buf of the start of
     * the current run.
     */
    yy_bp = yy_cp;

%% find_next_match: code to set up and find next match goes here

yy_find_action:
%% find_action_number: code to find the action number goes here

    YY_DO_BEFORE_ACTION;

%if do_yylineno
    if (yy_act != YY_END_OF_BUFFER) {
      int yyl;
      for (yyl = 0; yyl < yy_lexer->yy_leng; ++yyl) {
        if (yy_lexer->yy_text[yyl] == '\n') {
          ++(yy_lexer->yy_lineno);
        }
      }
    }
%endif

do_action:      /* This label is used only to access EOF actions. */

%if option_debug
    if (yy_lexer->yy_flex_debug) {
%if !cpp_interface
      if (yy_act == 0)
        fprintf(stderr, "--scanner backing up\n");
      else if (yy_act < YY_NUM_RULES)
        fprintf(stderr, "--accepting rule at line %d (\"%s\")\n",
                yy_rule_linenum[yy_act], yy_lexer->yy_text);
      else if (yy_act == YY_NUM_RULES)
        fprintf(stderr, "--accepting default rule (\"%s\")\n",
                yy_lexer->yy_text);
      else if (yy_act == YY_NUM_RULES+1)
        fprintf(stderr, "--(end of buffer or a NUL)\n");
      else
        fprintf(stderr, "--EOF (start condition %d)\n", YY_START);
%else
      if (yy_act == 0)
        std::cerr << "--scanner backing up\n";
      else if (yy_act < YY_NUM_RULES)
        std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
                     " (\"" << yy_lexer->yy_text << "\")\n";
      else if (yy_act == YY_NUM_RULES)
        std::cerr << "--accepting default rule (\"" << yy_lexer->yy_text << "\")\n";
      else if (yy_act == YY_NUM_RULES+1)
        std::cerr << "--(end of buffer or a NUL)\n";
      else
        std::cerr << "--EOF (start condition " << YY_START << ")\n";
%endif
    }
%endif

    switch (yy_act) { /* beginning of action switch */

      /* Prepare convenience aliases for important data.
       * These aliases can only be used directly within actions, not
       * in other functions, even those defined in sections 1 or 3. */
#     define yytext (yy_lexer->yy_text)
#     define yyleng (yy_lexer->yy_leng)
%if option_yy_read_character
#     define YY_READ_CHARACTER() (yy_read_character(yy_lexer))
%endif
%if option_yy_unread_character
#     define YY_UNREAD_CHARACTER(c) yy_unread_character(yy_lexer, c)
%endif
#     define yyin (yy_lexer->yy_input_stream)
#     define yyout (yy_lexer->yy_output_stream)
%if do_yylineno
#     define yylineno (yy_lexer->yy_lineno)
%endif

%if option_flex_compat
      /* flex compatibility aliases. */
%if option_yy_read_character
#     define input() YY_READ_CHARACTER()
#     define yyinput() YY_READ_CHARACTER()
%endif
%if option_yy_unread_character
#     define unput(c) YY_UNREAD_CHARACTER(c)
%endif
%endif # option_flex_compat

%% user_actions: user rule actions from section 2 go here


      /* Remove the section 2 aliases. */
#     undef yytext
#     undef yyleng
%if option_yy_read_character
#     undef YY_READ_CHARACTER
%endif
%if option_yy_unread_character
#     undef YY_UNREAD_CHARACTER
%endif
#     undef yyin
#     undef yyout
%if do_yylineno
#     undef yylineno
%endif
%if option_flex_compat
#     undef input
#     undef yyinput
#     undef unput
%endif


      case YY_END_OF_BUFFER: {
        /* Amount of text matched not including the EOB char. */
        int yy_amount_of_matched_text = (int)(yy_cp - yy_lexer->yy_text) - 1;

        /* Undo the effects of YY_DO_BEFORE_ACTION. */
        *yy_cp = yy_lexer->yy_hold_char;

        if (yy_lexer->yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW) {
          /* We're scanning a new file or input source.  It's
           * possible that this happened because the user
           * just pointed yy_input_stream at a new source and called
           * yy_lex().  If so, then we have to assure
           * consistency between yy_current_buffer and our
           * globals.  Here is the right place to do so, because
           * this is the first action (other than possibly a
           * back-up) that will match for the new input source.
           */
          yy_lexer->yy_n_chars = yy_lexer->yy_current_buffer->yy_n_chars;
          yy_lexer->yy_current_buffer->yy_input_file = yy_lexer->yy_input_stream;
          yy_lexer->yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
        }

        /* Note that here we test for yy_c_buf_p "<=" to the position
         * of the first EOB in the buffer, since yy_c_buf_p will
         * already have been incremented past the NUL character
         * (since all states make transitions on EOB to the
         * end-of-buffer state).  Contrast this with the test
         * in input().
         */
        if (yy_lexer->yy_c_buf_p <=
              &yy_lexer->yy_current_buffer->yy_ch_buf[yy_lexer->yy_n_chars]) {
          /* This was really a NUL. */
          yy_state_type_t yy_next_state;

          yy_lexer->yy_c_buf_p = yy_lexer->yy_text + yy_amount_of_matched_text;

          yy_current_state = yy_get_previous_state(yy_lexer);

          /* Okay, we're now positioned to make the NUL
           * transition.  We couldn't have
           * yy_get_previous_state() go ahead and do it
           * for us because it doesn't know how to deal
           * with the possibility of jamming (and we don't
           * want to build jamming into it because then it
           * will run more slowly).
           */

          yy_next_state = yy_try_NUL_trans(yy_lexer, yy_current_state);

          yy_bp = yy_lexer->yy_text + YY_MORE_ADJ;

          if (yy_next_state) {
            /* Consume the NUL. */
            yy_cp = ++(yy_lexer->yy_c_buf_p);
            yy_current_state = yy_next_state;
            goto yy_match;
          }

          else {
%% back_up: code to do back-up for compressed tables and set up yy_cp goes here
            goto yy_find_action;
          }
        }

        else {
          switch (yy_get_next_buffer(yy_lexer)) {
            case EOB_ACT_END_OF_FILE: {
              yy_lexer->yy_did_buffer_switch_on_eof = 0;

              if (yy_lexer->yy_wrap_function == NULL ||
                  yy_lexer->yy_wrap_function(yy_lexer)) {
                /* Note: because we've taken care in
                 * yy_get_next_buffer() to have set up
                 * yy_text, we can now set up
                 * yy_c_buf_p so that if some total
                 * hoser (like smflex itself) wants to
                 * call the scanner after we return the
                 * YY_NULL, it'll still work - another
                 * YY_NULL will get returned.
                 */
                yy_lexer->yy_c_buf_p = yy_lexer->yy_text + YY_MORE_ADJ;

                yy_act = YY_STATE_EOF(YY_START);
                goto do_action;
              }

              else {
                if (!yy_lexer->yy_did_buffer_switch_on_eof) {
                  YY_NEW_FILE;
                }
              }
              break;
            }

            case EOB_ACT_CONTINUE_SCAN:
              yy_lexer->yy_c_buf_p = yy_lexer->yy_text + yy_amount_of_matched_text;

              yy_current_state = yy_get_previous_state(yy_lexer);

              yy_cp = yy_lexer->yy_c_buf_p;
              yy_bp = yy_lexer->yy_text + YY_MORE_ADJ;
              goto yy_match;

            case EOB_ACT_LAST_MATCH:
              yy_lexer->yy_c_buf_p =
                &yy_lexer->yy_current_buffer->yy_ch_buf[yy_lexer->yy_n_chars];

              yy_current_state = yy_get_previous_state(yy_lexer);

              yy_cp = yy_lexer->yy_c_buf_p;
              yy_bp = yy_lexer->yy_text + YY_MORE_ADJ;
              goto yy_find_action;
          } /* switch (yy_get_next_buffer()) */
        }

        break;
      } /* case YY_END_OF_BUFFER */

      default:
        YY_FATAL_ERROR("fatal smflex scanner internal error--no action found");
        break;
    } /* end of action switch */
  } /* end of scanning one token */
} /* end of yy_lex */


void yy_construct(yy_lexer_t *yy_lexer)
{
%if !cpp_interface
  yy_lexer->yy_client_data = NULL;
%else
  yy_lexer->yy_wrapper_object = NULL;
%endif

  yy_lexer->yy_text = NULL;
  yy_lexer->yy_leng = 0;

  yy_lexer->yy_input_stream = NULL;
  yy_lexer->yy_output_stream = NULL;
  yy_lexer->yy_current_buffer = NULL;

  yy_lexer->yy_hold_char = 0;
  yy_lexer->yy_n_chars = 0;

  yy_lexer->yy_c_buf_p = NULL;
  yy_lexer->yy_init = 1;
  yy_lexer->yy_start_state = 0;
  yy_lexer->yy_did_buffer_switch_on_eof = 0;

  yy_lexer->yy_wrap_function = NULL;

%if do_yylineno
  yy_lexer->yy_lineno = 1;

%endif
%if option_debug
  yy_lexer->yy_flex_debug = 1;

%endif
%if num_backing_up > 0 && !reject_used
  yy_lexer->yy_last_accepting_state = 0; /* This can be a pointer. */
  yy_lexer->yy_last_accepting_cpos = NULL;

%endif
%if reject_used
  yy_lexer->yy_state_buf =
    (yy_state_type_t*)yy_flex_alloc(sizeof(yy_state_type_t) * (YY_BUF_SIZE+2));
  yy_lexer->yy_state_ptr = NULL;
  yy_lexer->yy_full_match = NULL;
  yy_lexer->yy_lp = 0;

%endif
%if reject_used && variable_trailing_context_rules
  yy_lexer->yy_looking_for_trail_begin = 0;
  yy_lexer->yy_full_lp = 0;
  yy_lexer->yy_full_state = NULL;

%endif
%if yymore_used
  yy_lexer->yy_more_flag = 0;
  yy_lexer->yy_more_len = 0;

%endif
%if option_stack
  yy_lexer->yy_start_stack_cur_size = 0;
  yy_lexer->yy_start_stack_alloc_size = 0;
  yy_lexer->yy_start_stack_array = NULL;

%endif
}

%if cpp_interface
yyFlexLexer::yyFlexLexer(YY_INPUT_STREAM_TYPE *arg_yyin, YY_OUTPUT_STREAM_TYPE *arg_yyout)
{
  yy_construct(&yym_lexer_state);
  yym_lexer_state.yy_input_stream = arg_yyin;
  yym_lexer_state.yy_output_stream = arg_yyout;
  yym_lexer_state.yy_wrapper_object = this;
  yym_lexer_state.yy_wrap_function = &yy_wrap_delegate;
}
%endif

void yy_destroy(yy_lexer_t *yy_lexer)
{
%if reject_used
  free(yy_lexer->yy_state_buf);
%endif
  yy_delete_buffer(yy_lexer, yy_lexer->yy_current_buffer);
}

%if cpp_interface
yyFlexLexer::~yyFlexLexer()
{
  yy_destroy(&yym_lexer_state);
}

void yyFlexLexer::yym_switch_streams(YY_INPUT_STREAM_TYPE *new_in, YY_OUTPUT_STREAM_TYPE *new_out)
{
  if (new_in) {
    yym_delete_buffer(yym_lexer_state.yy_current_buffer);
    yym_switch_to_buffer(yym_create_buffer(new_in, YY_BUF_SIZE));
  }

  if (new_out) {
    yym_lexer_state.yy_output_stream = new_out;
  }
}

int yyFlexLexer::yym_LexerInput(char* buf, int max_size)
{
  if (yym_lexer_state.yy_input_stream->eof()) {
    YY_DEBUG_LOG_CALL("first istream::eof()", 1);
    return 0;
  }

  if (yym_lexer_state.yy_input_stream->fail()) {
    YY_DEBUG_LOG_CALL("istream::fail()", 1);
    return -1;
  }

  if (yym_lexer_state.yy_current_buffer->yy_is_interactive) {
    yym_lexer_state.yy_input_stream->get(buf[0]);

    if (yym_lexer_state.yy_input_stream->eof()) {
      YY_DEBUG_LOG_CALL("second istream::eof()", 1);
      return 0;
    }

    if (yym_lexer_state.yy_input_stream->bad()) {
      YY_DEBUG_LOG_CALL("istream::bad()", 1);
      return -1;
    }

    YY_DEBUG_LOG_CALL("istream::get()", buf[0]);
    return 1;
  }

  else {
    (void) yym_lexer_state.yy_input_stream->read(buf, max_size);

    if (yym_lexer_state.yy_input_stream->bad()) {
      YY_DEBUG_LOG_CALL("istream::bad()", 1);
      return -1;
    }
    else {
      std::streamsize ret = yym_lexer_state.yy_input_stream->gcount();
      YY_DEBUG_LOG_CALL("istream::gcount()", ret);
      return ret;
    }
  }
}

void yyFlexLexer::yym_LexerOutput(const char *buf, int size)
{
  (void) yym_lexer_state.yy_output_stream->write(buf, size);
}
%endif

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *      EOB_ACT_LAST_MATCH -
 *      EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *      EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer(yy_lexer_t *yy_lexer)
{
  char *dest = yy_lexer->yy_current_buffer->yy_ch_buf;
  char *source = yy_lexer->yy_text;
  int number_to_move, i;
  int ret_val;

  if (yy_lexer->yy_c_buf_p > &yy_lexer->yy_current_buffer->yy_ch_buf[yy_lexer->yy_n_chars + 1]) {
    YY_FATAL_ERROR("fatal smflex scanner internal error--end of buffer missed");
  }

  if (yy_lexer->yy_current_buffer->yy_fill_buffer == 0) { /* Don't try to fill the buffer, so this is an EOF. */
    if (yy_lexer->yy_c_buf_p - yy_lexer->yy_text - YY_MORE_ADJ == 1) {
      /* We matched a single character, the EOB, so
       * treat this as a final EOF.
       */
      return EOB_ACT_END_OF_FILE;
    }

    else {
      /* We matched some text prior to the EOB, first
       * process it.
       */
      return EOB_ACT_LAST_MATCH;
    }
  }

  /* Try to read more data. */

  /* First move last chars to start of buffer. */
  number_to_move = (int) (yy_lexer->yy_c_buf_p - yy_lexer->yy_text) - 1;

  for (i = 0; i < number_to_move; ++i) {
    *(dest++) = *(source++);
  }

  if (yy_lexer->yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING) {
    /* don't do the read, it's not guaranteed to return an EOF,
     * just force an EOF
     */
    yy_lexer->yy_current_buffer->yy_n_chars = yy_lexer->yy_n_chars = 0;
  }

  else {
    int num_to_read = yy_lexer->yy_current_buffer->yy_buf_size - number_to_move - 1;

    while (num_to_read <= 0) {  /* Not enough room in the buffer - grow it. */
%if reject_used
      YY_FATAL_ERROR
        ("input buffer overflow, can't enlarge buffer because scanner uses REJECT");
%else
      /* just a shorter name for the current buffer */
      yy_buffer_state_t *b = yy_lexer->yy_current_buffer;

      int yy_c_buf_p_offset = (int) (yy_lexer->yy_c_buf_p - b->yy_ch_buf);

      if (b->yy_is_our_buffer) {
        int new_size = b->yy_buf_size * 2;

        if (new_size <= 0)
          b->yy_buf_size += b->yy_buf_size / 8;
        else
          b->yy_buf_size *= 2;

        b->yy_ch_buf = (char *)
          /* Include room in for 2 EOB chars. */
          yy_flex_realloc((void *) b->yy_ch_buf, b->yy_buf_size + 2);
      }
      else {
        /* Can't grow it, we don't own it. */
        b->yy_ch_buf = 0;
      }

      if (!b->yy_ch_buf) {
        YY_FATAL_ERROR("fatal error - scanner input buffer overflow");
      }

      yy_lexer->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

      num_to_read = yy_lexer->yy_current_buffer->yy_buf_size - number_to_move - 1;
%endif
    }

    if (num_to_read > YY_READ_BUF_SIZE) {
      num_to_read = YY_READ_BUF_SIZE;
    }

    /* Read in more data. */
    YY_INPUT((&yy_lexer->yy_current_buffer->yy_ch_buf[number_to_move]),
             yy_lexer->yy_n_chars, num_to_read);

    yy_lexer->yy_current_buffer->yy_n_chars = yy_lexer->yy_n_chars;
  }

  if (yy_lexer->yy_n_chars == 0) {
    if (number_to_move == YY_MORE_ADJ) {
      ret_val = EOB_ACT_END_OF_FILE;
      yy_restart(yy_lexer, yy_lexer->yy_input_stream);
    }

    else {
      ret_val = EOB_ACT_LAST_MATCH;
      yy_lexer->yy_current_buffer->yy_buffer_status = YY_BUFFER_EOF_PENDING;
    }
  }

  else {
    ret_val = EOB_ACT_CONTINUE_SCAN;
  }

  yy_lexer->yy_n_chars += number_to_move;
  yy_lexer->yy_current_buffer->yy_ch_buf[yy_lexer->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
  yy_lexer->yy_current_buffer->yy_ch_buf[yy_lexer->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

  yy_lexer->yy_text = &yy_lexer->yy_current_buffer->yy_ch_buf[0];

  return ret_val;
}


/* yy_get_previous_state - get the state just before the EOB char was reached */
static yy_state_type_t yy_get_previous_state(yy_lexer_t *yy_lexer)
{
  yy_state_type_t yy_current_state;
  char *yy_cp;

%% prev_start_to_current: code to get the start state into yy_current_state goes here

  for (yy_cp = yy_lexer->yy_text + YY_MORE_ADJ;
       yy_cp < yy_lexer->yy_c_buf_p;
       ++yy_cp) {
%% prev_find_next_state: code to find the next state goes here
  }

  return yy_current_state;
}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *      next_state = yy_try_NUL_trans(yy_lexer, current_state);
 */
static yy_state_type_t yy_try_NUL_trans(yy_lexer_t *yy_lexer, yy_state_type_t yy_current_state)
{
  int yy_is_jam;
%% nul_trans_next_state: code to find the next state, and perhaps do backing up, goes here

  return yy_is_jam ? 0 : yy_current_state;
}


%if option_yy_unread_character
void yy_unread_character(yy_lexer_t *yy_lexer, int c)
{
  char *yy_bp = yy_lexer->yy_text;
  char *yy_cp = yy_lexer->yy_c_buf_p;

  /* undo effects of setting up yy_text */
  *yy_cp = yy_lexer->yy_hold_char;

  if (yy_cp < yy_lexer->yy_current_buffer->yy_ch_buf + 2) {
    /* need to shift things up to make room */
    /* +2 for EOB chars. */
    int number_to_move = yy_lexer->yy_n_chars + 2;
    char *dest = &yy_lexer->yy_current_buffer->yy_ch_buf[
      yy_lexer->yy_current_buffer->yy_buf_size + 2];
    char *source =
      &yy_lexer->yy_current_buffer->yy_ch_buf[number_to_move];

    while (source > yy_lexer->yy_current_buffer->yy_ch_buf) {
      *--dest = *--source;
    }

    yy_cp += (int)(dest - source);
    yy_bp += (int)(dest - source);
    yy_lexer->yy_current_buffer->yy_n_chars =
      yy_lexer->yy_n_chars = yy_lexer->yy_current_buffer->yy_buf_size;

    if (yy_cp < yy_lexer->yy_current_buffer->yy_ch_buf + 2) {
      YY_FATAL_ERROR("smflex scanner push-back overflow");
    }
  }

  *--yy_cp = (char)c;

%if do_yylineno
  if (c == '\n') {
    --(yy_lexer->yy_lineno);
  }
%endif

  yy_lexer->yy_text = yy_bp;
  yy_lexer->yy_hold_char = *yy_cp;
  yy_lexer->yy_c_buf_p = yy_cp;
}

%if cpp_interface
void yyFlexLexer::yym_unread_character(int c)
{
  yy_unread_character(&yym_lexer_state, c);
}
%endif
%endif # option_yy_unread_character


%if option_yy_read_character
/* Read one character from the current input source of 'yy_lexer'. */
int yy_read_character(yy_lexer_t *yy_lexer)
{
  int c;

  *(yy_lexer->yy_c_buf_p) = yy_lexer->yy_hold_char;

  if (*(yy_lexer->yy_c_buf_p) == YY_END_OF_BUFFER_CHAR) {
    /* yy_c_buf_p now points to the character we want to return.
     * If this occurs *before* the EOB characters, then it's a
     * valid NUL; if not, then we've hit the end of the buffer.
     */
    if (yy_lexer->yy_c_buf_p <
          &yy_lexer->yy_current_buffer->yy_ch_buf[yy_lexer->yy_n_chars]) {
      /* This was really a NUL. */
      *(yy_lexer->yy_c_buf_p) = '\0';
    }

    else { /* need more input */
      int offset = yy_lexer->yy_c_buf_p - yy_lexer->yy_text;
      ++(yy_lexer->yy_c_buf_p);

      switch (yy_get_next_buffer(yy_lexer)) {
        case EOB_ACT_LAST_MATCH:
          /* This happens because yy_g_n_b()
           * sees that we've accumulated a
           * token and flags that we need to
           * try matching the token before
           * proceeding.  But for input(),
           * there's no matching to consider.
           * So convert the EOB_ACT_LAST_MATCH
           * to EOB_ACT_END_OF_FILE.
           */

          /* Reset buffer status. */
          yy_restart(yy_lexer, yy_lexer->yy_input_stream);

          /* fall through */

        case EOB_ACT_END_OF_FILE: {
          if (yy_lexer->yy_wrap_function == NULL ||
              yy_lexer->yy_wrap_function(yy_lexer)) {
            return EOF;
          }

          if (!yy_lexer->yy_did_buffer_switch_on_eof) {
            YY_NEW_FILE;
          }

          return yy_read_character(yy_lexer);
        }

        case EOB_ACT_CONTINUE_SCAN:
          yy_lexer->yy_c_buf_p = yy_lexer->yy_text + offset;
          break;
      }
    }
  }

  c = *(unsigned char *)yy_lexer->yy_c_buf_p;   /* cast for 8-bit char's */
  *(yy_lexer->yy_c_buf_p) = '\0';     /* preserve yy_text */
  yy_lexer->yy_hold_char = *++(yy_lexer->yy_c_buf_p);

%if bol_needed
  yy_lexer->yy_current_buffer->yy_at_bol = (c == '\n');
%endif
%if do_yylineno
  if (c == '\n') {
    ++(yy_lexer->yy_lineno);
  }
%endif

  return c;
}

%if cpp_interface
int yyFlexLexer::yym_read_character()
{
  return yy_read_character(&yym_lexer_state);
}
%endif
%endif # option_yy_read_character


void yy_restart(yy_lexer_t *yy_lexer, YY_INPUT_STREAM_TYPE *input_file)
{
  if (!yy_lexer->yy_current_buffer) {
    yy_lexer->yy_current_buffer =
      yy_create_buffer(yy_lexer, yy_lexer->yy_input_stream, YY_BUF_SIZE);
  }

  yy_init_buffer(yy_lexer, yy_lexer->yy_current_buffer, input_file);
  yy_load_buffer_state(yy_lexer);
}

%if cpp_interface
void yyFlexLexer::yym_restart(YY_INPUT_STREAM_TYPE *input_file)
{
  yy_restart(&yym_lexer_state, input_file);
}
%endif


void yy_switch_to_buffer(yy_lexer_t *yy_lexer, yy_buffer_state_t *new_buffer)
{
  if (yy_lexer->yy_current_buffer == new_buffer) {
    return;
  }

  if (yy_lexer->yy_current_buffer) {
    /* Flush out information for old buffer. */
    *(yy_lexer->yy_c_buf_p) = yy_lexer->yy_hold_char;
    yy_lexer->yy_current_buffer->yy_buf_pos = yy_lexer->yy_c_buf_p;
    yy_lexer->yy_current_buffer->yy_n_chars = yy_lexer->yy_n_chars;
  }

  yy_lexer->yy_current_buffer = new_buffer;
  yy_load_buffer_state(yy_lexer);

  /* We don't actually know whether we did this switch during
   * EOF (yy_wrap()) processing, but the only time this flag
   * is looked at is after yy_wrap() is called, so it's safe
   * to go ahead and always set it.
   */
  yy_lexer->yy_did_buffer_switch_on_eof = 1;
}

%if cpp_interface
void yyFlexLexer::yym_switch_to_buffer(yy_buffer_state_t *new_buffer)
{
  yy_switch_to_buffer(&yym_lexer_state, new_buffer);
}
%endif


static void yy_load_buffer_state(yy_lexer_t *yy_lexer)
{
  yy_lexer->yy_n_chars = yy_lexer->yy_current_buffer->yy_n_chars;
  yy_lexer->yy_text = yy_lexer->yy_c_buf_p = yy_lexer->yy_current_buffer->yy_buf_pos;
  yy_lexer->yy_input_stream = yy_lexer->yy_current_buffer->yy_input_file;
  yy_lexer->yy_hold_char = *(yy_lexer->yy_c_buf_p);
}


yy_buffer_state_t *yy_create_buffer(yy_lexer_t *yy_lexer,
                                    YY_INPUT_STREAM_TYPE *file, int size)
{
  yy_buffer_state_t *b;

  b = (yy_buffer_state_t*)yy_flex_alloc(sizeof(yy_buffer_state_t));
  if (!b) {
    YY_FATAL_ERROR("out of dynamic memory in yy_create_buffer()");
  }

  if (size == 0) {
    size = YY_BUF_SIZE;
  }
  b->yy_buf_size = size;

  /* yy_ch_buf has to be 2 characters longer than the size given because
   * we need to put in 2 end-of-buffer characters.
   */
  b->yy_ch_buf = (char*)yy_flex_alloc(b->yy_buf_size + 2);
  if (!b->yy_ch_buf) {
    YY_FATAL_ERROR("out of dynamic memory in yy_create_buffer()");
  }

  b->yy_is_our_buffer = 1;

  yy_init_buffer(yy_lexer, b, file);

  return b;
}

%if cpp_interface
yy_buffer_state_t *yyFlexLexer::yym_create_buffer(YY_INPUT_STREAM_TYPE *file,
                                                  int size)
{
  return yy_create_buffer(&yym_lexer_state, file, size);
}
%endif


void yy_delete_buffer(yy_lexer_t *yy_lexer, yy_buffer_state_t *b)
{
  if (!b) {
    return;
  }

  if (yy_lexer->yy_current_buffer == b) {
    /* Safety measure. */
    yy_lexer->yy_current_buffer = NULL;
  }

  if (b->yy_is_our_buffer) {
    yy_flex_free((void*)b->yy_ch_buf);
  }

  yy_flex_free((void*)b);
}

%if cpp_interface
void yyFlexLexer::yym_delete_buffer(yy_buffer_state_t *b)
{
  yy_delete_buffer(&yym_lexer_state, b);
}
%endif


static void yy_init_buffer(yy_lexer_t *yy_lexer,
                           yy_buffer_state_t *b, YY_INPUT_STREAM_TYPE *file)
{
  yy_flush_buffer(yy_lexer, b);

  b->yy_input_file = file;
  b->yy_fill_buffer = 1;

%if interactive
  b->yy_is_interactive = 1;
  YY_DEBUG_LOG_CALL("due to option interactive, yy_is_interactive is", b->yy_is_interactive);
%else
  b->yy_is_interactive = 0;
  YY_DEBUG_LOG_CALL("default behavior, so yy_is_interactive is", b->yy_is_interactive);
%endif
}


void yy_flush_buffer(yy_lexer_t *yy_lexer, yy_buffer_state_t *b)
{
  if (!b) {
    return;
  }

  b->yy_n_chars = 0;

  /* We always need two end-of-buffer characters.  The first causes
   * a transition to the end-of-buffer state.  The second causes
   * a jam in that state.
   */
  b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
  b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

  b->yy_buf_pos = &b->yy_ch_buf[0];

  b->yy_at_bol = 1;
  b->yy_buffer_status = YY_BUFFER_NEW;

  if (b == yy_lexer->yy_current_buffer) {
    yy_load_buffer_state(yy_lexer);
  }
}

%if cpp_interface
void yyFlexLexer::yym_flush_buffer(yy_buffer_state_t *b)
{
  yy_flush_buffer(&yym_lexer_state, b);
}
%endif


%if option_yy_scan_string
yy_buffer_state_t *yy_scan_string(yy_lexer_t *yy_lexer, const char *yy_str)
{
  return yy_scan_bytes(yy_lexer, yy_str, strlen(yy_str));
}

%if cpp_interface
yy_buffer_state_t *yyFlexLexer::yym_scan_string(const char *yy_str)
{
  return yy_scan_string(&yym_lexer_state, yy_str);
}
%endif
%endif


%if option_yy_scan_bytes
yy_buffer_state_t *yy_scan_bytes(yy_lexer_t *yy_lexer,
                                 const char *bytes, int len)
{
  yy_buffer_state_t *b;
  char *buf;
  size_t n;
  int i;

  /* Get memory for full buffer, including space for trailing EOB's. */
  n = len + 2;
  buf = (char*)yy_flex_alloc(n);
  if (!buf) {
    YY_FATAL_ERROR("out of dynamic memory in yy_scan_bytes()");
  }

  for (i = 0; i < len; ++i) {
    buf[i] = bytes[i];
  }

  buf[len] = buf[len + 1] = YY_END_OF_BUFFER_CHAR;

  b = yy_scan_buffer(yy_lexer, buf, n);
  if (!b) {
    YY_FATAL_ERROR("bad buffer in yy_scan_bytes()");
  }

  /* It's okay to grow etc. this buffer, and we should throw it
   * away when we're done.
   */
  b->yy_is_our_buffer = 1;

  return b;
}

%if cpp_interface
yy_buffer_state_t *yyFlexLexer::yym_scan_bytes(const char *bytes, int len)
{
  return yy_scan_bytes(&yym_lexer_state, bytes, len);
}
%endif
%endif


%if option_yy_scan_buffer
yy_buffer_state_t *yy_scan_buffer(yy_lexer_t *yy_lexer,
                                  char *base, size_t size)
{
  yy_buffer_state_t *b;

  if (size < 2 ||
      base[size - 2] != YY_END_OF_BUFFER_CHAR ||
      base[size - 1] != YY_END_OF_BUFFER_CHAR) {
    /* They forgot to leave room for the EOB's. */
    return 0;
  }

  b = (yy_buffer_state_t*)yy_flex_alloc(sizeof(yy_buffer_state_t));
  if (!b) {
    YY_FATAL_ERROR("out of dynamic memory in yy_scan_buffer()");
  }

  b->yy_buf_size = size - 2;    /* "- 2" to take care of EOB's */
  b->yy_buf_pos = b->yy_ch_buf = base;
  b->yy_is_our_buffer = 0;
  b->yy_input_file = 0;
  b->yy_n_chars = b->yy_buf_size;
  YY_DEBUG_LOG_CALL("setting yy_is_interactive to 0 in yy_scan_buffer", 0);
  b->yy_is_interactive = 0;
  b->yy_at_bol = 1;
  b->yy_fill_buffer = 0;
  b->yy_buffer_status = YY_BUFFER_NEW;

  yy_switch_to_buffer(yy_lexer, b);

  return b;
}

%if cpp_interface
yy_buffer_state_t *yyFlexLexer::yym_scan_buffer(char *base, size_t size)
{
  return yy_scan_buffer(&yym_lexer_state, base, size);
}
%endif
%endif


%if option_stack
void yy_push_state(yy_lexer_t *yy_lexer, int new_state)
{
  if (yy_lexer->yy_start_stack_cur_size >= yy_lexer->yy_start_stack_alloc_size) {
    size_t new_size;

    yy_lexer->yy_start_stack_alloc_size += YY_START_STACK_INCR;
    new_size = yy_lexer->yy_start_stack_alloc_size * sizeof(int);

    if (!yy_lexer->yy_start_stack_array) {
      yy_lexer->yy_start_stack_array = (int*)yy_flex_alloc(new_size);
    }
    else {
      yy_lexer->yy_start_stack_array =
        (int*)yy_flex_realloc((void*)yy_lexer->yy_start_stack_array, new_size);
    }

    if (!yy_lexer->yy_start_stack_array) {
      YY_FATAL_ERROR("out of memory expanding start-condition stack");
    }
  }

  yy_lexer->yy_start_stack_array[yy_lexer->yy_start_stack_cur_size++] = YY_START;

  BEGIN(new_state);
}

%if cpp_interface
void yyFlexLexer::yym_push_state(int new_state)
{
  yy_push_state(&yym_lexer_state, new_state);
}
%endif


void yy_pop_state(yy_lexer_t *yy_lexer)
{
  if (--(yy_lexer->yy_start_stack_cur_size) < 0) {
    YY_FATAL_ERROR("yy_pop_state: start-condition stack underflow");
  }

  BEGIN(yy_lexer->yy_start_stack_array[yy_lexer->yy_start_stack_cur_size]);
}

%if cpp_interface
void yyFlexLexer::yym_pop_state()
{
  yy_pop_state(&yym_lexer_state);
}
%endif


%if option_yy_top_state
int yy_top_state(yy_lexer_t *yy_lexer)
{
  if (yy_lexer->yy_start_stack_cur_size <= 0) {
    YY_FATAL_ERROR("yy_top_state: start-condition stack underflow");
  }

  return yy_lexer->yy_start_stack_array[yy_lexer->yy_start_stack_cur_size - 1];
}

%if cpp_interface
int yyFlexLexer::yym_top_state()
{
  return yy_top_state(&yym_lexer_state);
}
%endif
%endif
%endif # option_stack


#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error(yy_lexer_t *yy_lexer, char const *msg)
{
  (void)fprintf(stderr, "%s\n", msg);
  exit(YY_EXIT_FAILURE);
}

%if cpp_interface
void yyFlexLexer::yym_LexerError(char const *msg)
{
  yy_fatal_error(&yym_lexer_state, msg);
}
%endif


/* Redefine yyless() so it works in section 3 code. */
/* TODO: This is broken right now unless the user arranges to have
 * a 'yy_lexer' in scope in section 3. */
#undef yyless
#define yyless(n) \
  if (1) { \
    /* Undo effects of setting up yy_text. */ \
    yy_lexer->yy_text[yy_lexer->yy_leng] = yy_lexer->yy_hold_char; \
    yy_lexer->yy_c_buf_p = yy_lexer->yy_text + n; \
    yy_lexer->yy_hold_char = *(yy_lexer->yy_c_buf_p); \
    *(yy_lexer->yy_c_buf_p) = '\0'; \
    yy_lexer->yy_leng = n; \
  } else ((void)0)


/* Internal utility routines. */

static void *yy_flex_alloc(size_t size)
{
  return (void*)malloc(size);
}

static void *yy_flex_realloc(void *ptr, size_t size)
{
  /* The cast to (char *) in the following accommodates both
   * implementations that use char* generic pointers, and those
   * that use void* generic pointers.  It works with the latter
   * because both ANSI C and C++ allow castless assignment from
   * any pointer type to void*, and deal with argument conversions
   * as though doing an assignment.
   */
  return (void *) realloc((char *) ptr, size);
}

static void yy_flex_free(void *ptr)
{
  free(ptr);
}


void yy_set_start_state(yy_lexer_t *yy_lexer, int state)
{
  BEGIN(state);
}

%if cpp_interface
void yyFlexLexer::yym_set_start_state(int state)
{
  yy_set_start_state(&yym_lexer_state, state);
}
%endif


int yy_get_start_state(yy_lexer_t *yy_lexer)
{
  return YY_START;
}

%if cpp_interface
int yyFlexLexer::yym_get_start_state()
{
  return yy_get_start_state(&yym_lexer_state);
}
%endif


%if option_main
%if !cpp_interface
int main()
{
  /* Keep retrieving tokens and discarding them until EOF. */
  yy_lexer_t lexer;
  yy_construct(&lexer);
  while (yy_lex(&lexer) != 0)
    {} /* nothing */
  yy_destroy(&lexer);

  return 0;
}
%else
int main()
{
  /* Keep retrieving tokens and discarding them until EOF. */
%if yyclass
  yyclass_name lexer;
%else
  yyFlexLexer lexer;
%endif
  while (lexer.yym_lex() != 0)
    {} /* nothing */

  return 0;
}
%endif
%endif


/* BEGIN cannot be used in section 3.  Instead, 'yy_set_start_state' is
 * used. */
#undef BEGIN

/* After this point, the user's section 3 code appears. */
